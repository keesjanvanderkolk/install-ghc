#!/usr/bin/env python

# See README.md for usage.

import os
import sys
import getopt
import errno
import cPickle
import glob
import subprocess

#===============================================================================

# Some utility routines that help to execute this code incrementally. (Invoking
# the script after an error will only re-execute the step in which the error
# occurred).

key_prefix = "ghc:"

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def read_value(path):
    fp = file(path, "r")
    value = cPickle.Unpickler(fp).load()
    fp.close()
    return value

def write_value(path, value):
    fp = file(path, "w")
    cPickle.Pickler(fp).dump(value)
    fp.close()

def do(key, f):
    key_path = os.path.join(cache_dir, key_prefix+key+".memo")
    if os.path.exists(key_path):
        return read_value(key_path)

    v = f()

    with open(key_path, "wb") as fp:
        write_value(key_path, v)

    return v

def execute(cmd):
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p.communicate(b"input data that is passed to subprocess' stdin")
    if p.returncode != 0:
        raise Exception("Process exited with status: "+str(p.returncode))
    return output, err

#===============================================================================

optlist, args = getopt.getopt(sys.argv[1:], '', ['prefix=', 'tmpdir=', 'haskell-platform-archive=', 'ghc-archive='])

prefix = "/usr"
tmpdir = os.environ.get("TMP", "/tmp")

for (o,a) in optlist:
    if o == "--prefix":
        prefix = a
    if o == "--tmpdir":
        tmpdir = a

mkdir_p(prefix)

cache_dir = os.path.join(prefix, "@install-cache")
mkdir_p(cache_dir)

#===============================================================================

os.environ["PATH"] = os.path.join(prefix, "bin") + ":" + os.environ["PATH"]

#===============================================================================

if not os.environ.has_key("INSTALL_GHC"):

    # Make a fake chroot jail, and invoke the script recursively.

    print >>sys.stderr, "Using prefix:", prefix
    print >>sys.stderr, "Using tmpdir:", tmpdir

    def make_chroot():
        chroot_dir = os.path.join(cache_dir, "ghc-chroot")
        mkdir_p(chroot_dir)
        subprocess.call(["cp", "-av", "/usr", os.path.join(chroot_dir, "usr")])
        subprocess.call(["cp", "-av", "/bin", os.path.join(chroot_dir, "bin")])
        subprocess.call(["cp", "-av", "/lib", os.path.join(chroot_dir, "lib")])
        subprocess.call(["cp", "-av", "/lib32", os.path.join(chroot_dir, "lib32")])
        subprocess.call(["cp", "-av", "/lib64", os.path.join(chroot_dir, "lib64")])
        return chroot_dir

    chroot_dir = do("make-chroot:1", make_chroot)

    if not os.path.exists(os.path.join(chroot_dir, "home")):
        subprocess.call(["ln", "-s", "/home", os.path.join(chroot_dir, "home")])
    if not os.path.exists(os.path.join(chroot_dir, "etc")):
        subprocess.call(["ln", "-s", "/etc", os.path.join(chroot_dir, "etc")])

    mkdir_p(os.path.join(chroot_dir, "tmp"))

    # Set a flag so we know we are inside the fake chroot jail.
    #
    os.environ["INSTALL_GHC"] = "1"
    subprocess.call(["fakechroot", "chroot", chroot_dir, os.path.abspath(sys.argv[0])] + sys.argv[1:])

    sys.exit(0)

#===============================================================================
#
# NOTE: THE CODE BELOW WILL BE EXECUTED INSIDE A FAKE CHROOT JAIL
#
#===============================================================================

haskell_platform_archive = None
ghc_archive = None

for (o,a) in optlist:
    if o == "--haskell-platform-archive":
        haskell_platform_archive = os.path.abspath(a)
    elif o == "--ghc-archive":
        ghc_archive = os.path.abspath(a)

def unpack_haskell_platform():
    subprocess.call(["tar", "axvf", haskell_platform_archive, "-C", "/"])

do("unpack_haskell_platform:1", unpack_haskell_platform)

ghc_platform_name = os.listdir("/usr/local/haskell")[0]
ghc_platform_dir = os.path.join("/usr/local/haskell", ghc_platform_name)

def unpack_ghc():
    root_name = execute(["tar", "axvf", ghc_archive, "-C", cache_dir])[0].split("\n")[0].strip("/").split("/")[0]
    return os.path.join(cache_dir, root_name)

ghc_src_path = do("unpack_ghc:1", unpack_ghc)

os.environ["PATH"] = os.path.join(ghc_platform_dir, "bin") + ":" + os.environ["PATH"]

cwd = os.getcwd()
os.chdir(ghc_src_path)

def boot():
    subprocess.call(["perl", "boot"])

do("boot:1", boot)

def configure_ghc():
    subprocess.call(["./configure", "--prefix="+prefix])

do("configure:1", configure_ghc)

def make():
    subprocess.call(["make"])

do("make:1", make)

def install():
    subprocess.call(["make", "install"])

do("install:1", install)

